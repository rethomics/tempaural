% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_audio.R
\name{map_dir_chunks}
\alias{map_dir_chunks}
\title{Apply a user-defined function on target audio files}
\usage{
map_dir_chunks(
  metadata,
  root_dir,
  FUN,
  chunk_duration,
  tz = "UTC",
  cache = NULL,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{metadata}{a metadata table. See details.}

\item{root_dir}{the root directory of the local library. See details.}

\item{FUN}{a function to be run on each chunk. See details.}

\item{chunk_duration}{the length of the chunk, in seconds}

\item{tz, }{the timezone the files and provided dates are formatted in, default 'UTC'}

\item{cache}{an optional directory, where the chunk is indefinitely stored}

\item{verbose}{logical, whether to show progress and other messages}

\item{...}{arguments to be passed to \code{FUN}}
}
\value{
a \link[behavr:behavr]{behavr::behavr} table. The metadata corresponds to the user-provided \code{metadata}.
The data has the variables:
\itemize{
\item \code{id} -- matching the \code{id} in the metadata.
\item \code{t} --  the time in second from the \code{start_datetime} requested for this \code{id}
\item \code{...} -- variables computed by \code{FUN}
}
}
\description{
Uses a metadata table to query a local audio file library and apply an arbitrary function on consecutive time windows
}
\details{
Metadata is a table in which each row defines an individual. It must have the following columns:
\itemize{
\item \code{id} -- a character that uniquely identifies a biological individual.
For each value of \code{id}, a sub-directory, with the same name, must exist in \code{root_dir}.
\item \code{start_datetime} -- formatted as \verb{YYYY-MM-DD HH:MM:SS} The first requested time point for the individual.
\strong{Importantly, \code{start_datetime} will be used as the reference $t_0$.} in other words, if you want to express time relative to 10:00:00 -- e.g. as it would be a ZT0 --
you can specify \code{start_datetime} as "YYYY-MM-DD 10:00:00".
\item \code{end_datetime} -- the last requested time point for an individual.
In addition,  metadata can contain user-defined columns that will be used as metavariables (e.g. individual's genotype, treatment, ...)
}

Each \code{id} defined in metadata must correspond to a subdirectory in \code{root_dir} with the exact same name.
For instance, if you have \code{"animal_01"} and \code{"animal_02"} in the id feild of your metadata,
you then will have the directories \code{"<root_dir>/animal_01"} and \code{"<root_dir>/animal_02"}.

The function \code{FUN} must use a \link[tuneR:Wave]{tuneR::Wave} as an input and output a named list.
Each element of the list will be parsed as a new column in the resulting \link[behavr:behavr]{behavr::behavr} table.

Processing long audio file might be very long, according to the funcion (\code{FUN}) that is mapped.
If caching is turned on, the results of the computation on each chunk will be saved in a custom directory (\code{cache}).
In other words, the first time \code{FUN} is run on a chink, the result is saved, and will not be recomputed, as long as the same function is applied on the same chunk, from the same file.
Defining \code{cache} as a local directory turns caching on, and saves \code{R} objects accordingly.
Deleting the content of this directory is safe, but implies subsequent calls to \code{FUN} will be reevaluated.
}
\examples{
# get the path the the package-provided example directory
exple_dir = tempaural::tempaural_example_dir()
# show all the files in it
print(list.files(exple_dir, recursive = TRUE))
metadata = data.frame(id=c('ID1','ID2'),
                      start_datetime = c('2020-08-09 12:09:00','2020-08-09 17:08:00'),
                      end_datetime = c('2020-08-09 17:15:00', '2020-08-09 17:15:00'),
                      genotype=c('addesaf','fewsfr'))
print(metadata)
# a function that takes a wave as input and just outputs its duration 
# and a random variable
my_function <- function(wave){
 out <- list(
   my_var = rnorm(1),
     duration = length(wave@left)/wave@samp.rate
     )
 out
}
# now we map this function to all the matching audio chunks
dt <- tempaural::map_dir_chunks(metadata, exple_dir, 
                                FUN=my_function, chunk_duration = 60)
}
